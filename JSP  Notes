JEE as three container - JSP,servlet and EJB container is to load and execute the life cycle of the container 
 JSP (Java Server page):
 Problem statement 1- you have reistration page with multiple parameter , lot of data entry fields , Servlet can't display error message next to tab or data , servlet activated with url not with the UI
 problem statement 2 - display complete database of ID's we need to write lot of boliler plate of code , servlet not good for presentation layer 
 JSP is combination of servlet and HTML , internally it's converted into servlet 
 JPS as tag for everything , servlet is used for secure page , JSP is not secured as servlet , so all business layer in the servlet 
 Architecture of JSP :
 controller -  incoming request goes it view.jsp and model.java(pojo class)
 JSP Life cycle :
1. Translation stage  - translated to servlet(.java)
2. JSP init()
3._jsp service() - Method can't be over written 
4.destroy()- Garbage collection- clean the inactive service 

9 JSP Implicit objects ( Predifined object in JSP)
1.request - servletrequest 
2.response - servletresponse 
3.out - JSP writer like out.println(servlet)
4.config -servletconfig 
5.application - servletcontext 
6.session - httpsession 
7.page - object - visible only in particular JSP page 
8.Exception - throwable 
9.pagecontext - capablity add,read ,modify and remove attribute 

JSP Tags:
Scripting Tags - used for communication,printing,logic 
JSP Directives 
JSP Action tags
Comments tag 
custom tag or user defined tag

Scripting Tag 
1)Declaration Tag -<%! int x=5;%> - class level or global level or common to all object 
2)Expression Tag - <%="Hello"%> - printing result or Expression , Servlet send some date into JSP, using this tag servlet message printed in the HTML box
3)scriplet Tag - <% all logic service %>


Form creation using scripting tag :
step 1: create the form tag with action = "">
Step 2: enter name , input type is text 
step 3: input =submit and click 
step 4: create JSP tag to validate above click using if(click != null) that means it click
step 5:print the result of above if class with request.getparameter("fname")

JSP Directive :

<%@%>
<%@page%>
<%include%> - include some page include tag is used
<%taglib%> - refering the custom tag , helpful for import all the tag in particular folder

Demo JSP Directive :
<%=<h1>Hello for JSP @ +new date()%>"</h1>" - it will import the java util 
Exception handling in JSP 
Step 1 : Create new JSP page as error 
step 2 : declare @page iserrorpage ="true"
step 3: print the error message using span or out.print with style as Error occured<%=exception%>
step 4: get back to the execution page <%@page errorpage =Ã«rror.jsp> and <%@page iserrorpage ="true"%>

Action Tags:-Dynamic operation in JSP 
difference between @include directive  - is include the response in the translation phase itself 
<Jsp:inclue> in action tag - converts the response only and only if required when application is running 
<Jsp:forward>
<jsp:usebean>
<jsp:setproperty>
<jsp:getproperty>
Demo for Include :
Step 1: create the JSP page 
step 2: seprate page for footer.html 
step 3:create div parameter for common footer 
step 4: back to JSP page <@% include file= "footer.html"%> it is based on Directive 
step 5:create a form in the index page 
step 6: validate the click using if class by request.getparameter("click"!= nul)
step 7:validating the entered values 
step 9:create three files for traniee ,trainer and manager 
step 10:remove the html tags in the different pages
step 11:traniee page one div tag as well as in manager
step 12:if class is validated the trainee <Jsp:include pae ="tranier.jsp">
step 13: else if to match trainer or manager and use above mentioned include to navigate different page 

Reflection API: reduce the model class with declaration, setters and getters , reflection is used to reflect from anything to anything it will reduce the boiler plate of code in the model class 
Every name identified using field name it should be lower case 

Demo of Reflection API :
Step 1: create eb application project and create the JSP page 
step 2:create form in the JSP page with name , age ,DOB etc , action ="post"
step 3: validate the above parameter using if class by validating the register button as above 
step 4: create the <JSP:userbean> id ="pojo class "or model class and class ="import the java package code" scope = resquest> - it looking within the current request scope , if user object is available 
step 5: create the <JSP:setattribute> get all the setter details from the pojo class
step 6: create the <JSP:forward>to communicate with the servlet page 
step 7: create the servlet with calling the jsp and pojo page and above procedure used to create the registration page 
step 8: create the session

Custom Tag:
Why we need custom tag ? - 10 JSP pages 5 lines of code common for all 10 JSP pages , if we write in JSP it will be 50 JSP page , instead of that create the custom tag call java code 
and lots of presentation exposed to user , by writting custom tag this will be hidden and security is getting increased 
1. simple tag - without attribute and body example <br></br>
2. tag with attributes - <input type ="text"> 
3. tag with or without attributes - eg <div align="center"></div>

steps to develop custom tag :
step 1: create taghandler java class and overide dotag() write the logic of what tag exacty to do when called in JSP 
step 2: create a .tld(tag libary descriptor) file which is a xml file where you need to give configuration of the tag class which you created in step 1 
step 3: use directive <%@taglib%> import the  .tld file  created in step2 on any JSP  page and start calling your custom tag  on that particular JSP page

Demo Custom Tag :(Simple Tag)
Step 1: crete the Dynamic page 
step 2: create pakage tags 
step 3: create java class with the extends simpletagsupport
step 4:create the dotag() 
step 5: create jspwriter out = getjspcontext().getout()
step 6 : out.print the date 
step 7: create tld file is mytag.tld
step 8 :paste the oracle header for custom tag 
step 9 : whole tag covered in the <taglib></taglib>
step 10 : declare the <tlib-version>1.0 
step 11: declare <jsp-version>2.0
step 12 : <shortname> used to name differenciation and this used to call the tag eg: we may create the htmltag , this won't work in jsp , instead of that use shortname 
step 13: open the <tag> and <name>mydate</name>
step 14: declare the class <tag-class>com.tags.simpledatetag</tag-class> and <body-content>empty<body-content> as no body in the tag
step 15: create the HTML page with the <%taglib  prefix=st uri ="web-inf/mytag.tld%> and click on control and link we can see the taglib file 

Demo for tag with attributes with date formate as example :


Step 1: crete the Dynamic page 
step 2: create pakage tags 
step 3: create java class with the extends simpletagsupport
step 4:create the dotag() 
step 5: create jspwriter out = getjspcontext().getout()
step 6 : out.print the date 
step 7: create the string attribute eg format to change date
step 8: create this formate 
step 9: call the formate in out.println( new simpledateformat(format).format(new date()))
step 10: ceate the tag lib file or tld file
step 11:paste the oracle header for custom tag 
step 12: whole tag covered in the <taglib></taglib>
step 13 : declare the <tlib-version>1.0 
step 14: declare <jsp-version>2.0
step 15 : <shortname> used to name differenciation and this used to call the tag eg: we may create the htmltag , this won't work in jsp , instead of that use shortname 
step 16: open the <tag> and <name>mydate</name> and <attribute> and <name> of the attribute , required<true>,<rtexprvalue>true to evaluate the java code
step 17: create the HTML page with the <%taglib  prefix=st uri ="web-inf/mytag.tld%> and click on control and link we can see the taglib file 
step 18: under H1 declare the formate of the date

Demo for tag with or without attributes :

Step 1: crete the Dynamic page 
step 2: create pakage tags 
step 3: create java class with the extends simpletagsupport
step 4:create the dotag() 
step 5: create jspwriter out = getjspcontext().getout()
step 6: stringwriter  sw = new stringwriter(); used getjspbody.invoke(sw)
step 7: convert the string and anything can be converted to string using Java as out.println(sw.tostring().touppercase());
step 7: create tld file is mytag.tld
step 8 :paste the oracle header for custom tag 
step 9 : whole tag covered in the <taglib></taglib>
step 10 : declare the <tlib-version>1.0 
step 11: declare <jsp-version>2.0
step 12 : <shortname> used to name differenciation and this used to call the tag eg: we may create the htmltag , this won't work in jsp , instead of that use shortname 
step 13: open the <tag> and <name>mydate</name>
step 14: declare the class <tag-class>com.tags.simpledatetag</tag-class> and <body-content>scriptless<body-content> as no body in the tag









