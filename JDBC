JDBC Connection - Java can hold maximum of 1000 Data not more than using the List or serialization/deserializaion - Data Not organised properly , so used the sql 
Three layers - Presentation , Business Layer and Presistance Layer or Database Layer 
SQL Providers/No SQL - Not an RDBMS  :
  1.Storage - Large Storage and information permannently 
  2.organized Database management (RDBMS) - Sepration of Tables 
  3.SQL(DDL,DML,DCL ,TCL ,DQL)
  
  JDBC DB Connection 
  1.JDBC ODBC Driver 
  2.Java Native API 
  3.Network Protocol 
  4.Database Protocol (thin)- 100%pj Driver - lesser memory database
  
 Steps to Intract with Database 
 1.Load or Register Driver (Jar files)
 2.Open connection (url, Authendication to database)
 3.Create Statement
    -statement 
      -prepared statement - compile 1 time and run multiple times
      -callable statement - intrating with psql,nosql etc (strored procdure)
    SQL Injection - 
  4.Execute Query 
    -boolean Execute -DDL PL/SQL
    -int execute update -DML
    -Result Execute query - 
  5.Process the result 
  6.close connection 
 
 JDBC Connection using Eclipise to Load JDBC (statement type Example)
 
 public class Hellojdbc{
 
 public static void main(String[]args) {
 try{
 //step1 :load Driver
 class.forname("oracle.jdbc.oracledriver");
 system.out.prinln("Driver Loaded");
 //step 2 :Authendication and URL Link
 connection = Drivermanager.getconnection(url,username,password);
 string url ="URL of oracle";
 string username = "üsername";
 string password = "password";
 //step 3: create statement
 statement statement =connection.createstatement();
 string sql ="select id,name,ob,age from player";
 //step 4:Execute Query
 resultset resultset = connection.executequery(sql);
 system.out.println("it is executed"");
 //step 5:Process the result 
 While(result.next()) {
 system.out.println("id =" resultset.getint(id));
 }
 catch(classnotfoundException e){
 system.out.println(e);
 }fianlly{
 try{
 //step6: close connection
 connection.close();
 system.out.println(connection closed);
 }catch (sqlexception e){
 system.out.println(e);
 }
 }
  
Common connection for Complete Java Program :

public oracleconnection {

private static connection connection {

public static connection getconnection() throws sqlexception ,classnotfoundException {

//step1 :load Driver
 class.forname("oracle.jdbc.oracledriver");
 system.out.prinln("Driver Loaded");
 //step 2 :Authendication and URL Link
 
 string url ="URL of oracle";
 string username = "üsername";
 string password = "password";
 retun connection = Drivermanager.getconnection(url,username,password);
}
}

insert into player and Team in Database 

Player table with 
insert to player Name,ID,DOB,TID from table;

TID is forign key to team table - refence with the Team table 

public class insertdemo {
public static void main (string [] args) {

try(connection connection = oracleconnection.getconnection()){
string sql1 ="insert into team(tid,teamname) values(? ,?)";
string sql2 ="insert into player(id,name,dob,age,tid) values(? ,?,?,?,?)";
preparedstatement preparedstatement = connection.preparedstatement(sql1);
preparedstatement.setint(1,101);
preparedstatement.setstring(2,red);
int x=preparedstatement.executeupdate();
system.out.println(x+"team updated");
}
catch(classnotfoundexception | sqlexception e){
system.put.println(e);
}
}

Modify the above code:

public class insertdemo {
public static void main (string [] args) {

try(connection connection = oracleconnection.getconnection()){

string sql2 ="insert into player(id,name,dob,age,tid) values(? ,?,?,?,?)";
preparedstatement preparedstatement = connection.preparedstatement(sql2);
preparedstatement.setint(1,101);
preparedstatement.setstring(2,Aravind);
preparedstatement.setint(3, new java.sql.date(new date()));
preparedstatement.setint(4,29);
preparedstatement.setint(5,102);
int x=preparedstatement.executeupdate();
system.out.println(x+"team updated");

}
catch(classnotfoundexception | sqlexception e){
if(e instanceof sqlexecption) {
try {
connection.rollback();//used rollback the query 
system.put.println("Query rollback"+connection);
} catch (SQL Exception e) {
system.out.println(e1);
}
}

e.printstacktrace();
}
finally {
if(connection !=null){
try{
connection.close();
}catch(sqlexception e){
system.out.println(e);
}
}
public static int createteam(connection connection ,int tid,string teamname) {
string sql1 ="insert into team(tid,teamname) values(? ,?)";
int x=0;
try{
preparedstatement preparedstatement = connection.preparedstatement(sql1);
preparedstatement.setint(1,101);
preparedstatement.setstring(2,red);
int x=preparedstatement.executeupdate();
system.out.println(x+"team updated");
}

} 



PL/SQL - SQL is not able to remember the query , but PSQL as reusable option 

PL
Methods(resuable)
loops 
decision
Exception 
data structure collection 
Array 
index by table 
table 
record 
trigger - delete , update , inser trigger is used eg (10% discount to user , but user request to get 11 % discount , trigger will execute and inform the user 10% discount only)
pointer - are called cursor , like ticket booking incase transaction rolledback or success resleased to the user 

Step 1 :Syntax PSQL - set serveroutput ON;
Anymous block - 

Architecture  
Declare - things needs to be Declare the data types or declaration block and not mandotry include 
Execution block is mandotry 
Exception block is also not mandotry 
end 

Syntax:
PL/SQL Hello world code:
begin 
DBMS_output.put_Line('hello psql');
end;

PL/sql Declartion Example with procdure and function  :
declare 
name varchar2 (20) := 'simplilearn';
begin 
DBMS_output.puy_line('hello' ||name);
helloproc();
DBMS_output.puy_line(hellofunc());
end 

Create or replace procedure helloproc as 
begin 
DBMS_output.puy_line('hello Procedure');
end helloproc;


Create or replace function helloproc return varchar2 as 
begin 
return'hello function ';
end helloproc;

Parameter in PL/SQL
  1.In-input 
  2.out- output 
  3.inout - input/output - can be send and modifiable the procedure 

Code Example with parameter :
begin 
DBMS_output.put_line('result =' ||result);
end 
 
 Create or replace procedure sumof2number(a number, b number , res out number ) as
 begin
  res: = a+b;
  end;
  
  Auto increment in ID using PL/SQL procedure and Sequence :
  
  1.Go to player table 
  2. click on + and procedure 
  3. V_ID,V_Name,V_DOB,V_Age,V-TID 
  4. create sequence enter name as player_seq 
  5.enter v-ID and start from 30000 
  
  Code in procedure below :
  Create or replace procedure player {
  V_ID out number, 
  V_Name IN Varchar2, 
  V_Contact IN Number, 
  V_dob IN date, 
  V_TID IN number, 
  }
  begin 
  select player_seq.nextval into V_ID frm dual 
  insert into player(id,name,dob,age,tid) values(V_ID,V_NAME,V_DOB,V_CONTACT,V_DOb,V_TID)
  end helloproc;

begin 
createplayer(V_id ,'testplayer',1234567890,22,103,'10/10/1993');
DBMS_output.put_line(||V_ID);
end 

Create Player.java class in sts with getters and setters 

package eg2;

import java.util.Date;

public class Player {

	private int id;
	private String name;
	private int age;
	private Date dob;
	private int tid;
	private long contact;
	public Player() {
		// TODO Auto-generated constructor stub
	}
	public Player(String name, int age, Date dob, int tid, long contact) {
		super();
		this.name = name;
		this.age = age;
		this.dob = dob;
		this.tid = tid;
		this.contact = contact;
	}
	@Override
	public String toString() {
		return "Player [id=" + id + ", name=" + name + ", age=" + age + ", dob=" + dob + ", tid=" + tid + ", contact="
				+ contact + "]";
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public Date getDob() {
		return dob;
	}
	public void setDob(Date dob) {
		this.dob = dob;
	}
	public int getTid() {
		return tid;
	}
	public void setTid(int tid) {
		this.tid = tid;
	}
	public long getContact() {
		return contact;
	}
	public void setContact(long contact) {
		this.contact = contact;
	}
	
}

Step 2: Player DAO Class : Caller statement Example 
package eg2;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;

import com.dbutil.OracleConnection;

public class PlayerDAO {

	
	public Player createPlayer(Player player) throws Exception {
		
		try(Connection connection=OracleConnection.getConnection()){
			CallableStatement callableStatement=connection.prepareCall("{call CREATEPLAYER(?,?,?,?,?,?)}");
			callableStatement.setString(2, player.getName());
			callableStatement.setLong(3, player.getContact());
			callableStatement.setInt(4, player.getAge());
			callableStatement.setInt(5, player.getTid());
			callableStatement.setDate(6, new java.sql.Date(player.getDob().getTime()));
			callableStatement.registerOutParameter(1, java.sql.Types.NUMERIC);
			
			callableStatement.execute();
			player.setId(callableStatement.getInt(1));
			
		}catch(SQLIntegrityConstraintViolationException e) {
			throw new Exception("Player Contact "+player.getContact()+" exists in the database.");
		}
		catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
			throw new Exception("Internal error occured contact SYSADMIN");
		}
		return player;
	}
}/*
for PLSQL function call do this
{?=call CREATEPLAYER(?,?,?,?,?)}
rest will be the same as you did for procedure
*/
step 3: Main .Java : to call DAO and Player class 

package eg2;

import java.util.Date;

public class Main {

	public static void main(String[] args) {
		
		PlayerDAO dao=new PlayerDAO();
		Player player=new Player("Mahesh", 29, new Date(), 101, 7891230898L);
		try {
			player=dao.createPlayer(player);
			if(player.getId()!=0) {
				System.out.println("Player created with below details");
				System.out.println(player);
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		

	}

}







